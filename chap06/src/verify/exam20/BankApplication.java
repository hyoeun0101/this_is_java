package verify.exam20;

import java.util.Scanner;

public class BankApplication {
	private static Account[] accountArray = new Account[100];
	private static Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		boolean run = true;
		while(run) {
			System.out.println("-----------------");
			System.out.println("1.계좌생성|2.계좌목록|3.예금|4.출금|5.종료");
			System.out.println("선택>");
			
			int selectNo = scanner.nextInt();
			
			if(selectNo == 1) {
				createAccount();
			}else if(selectNo == 2){
				accountList();
			}else if(selectNo == 3) {
				desposit();
			}else if(selectNo == 4) {
				withdraw();
			}else if(selectNo == 5) {
				run = false;
			}
		}
		System.out.println("프로그램 종료");
	}

	
	//계좌생성
	private static void createAccount() {
		System.out.println("계좌생성");
		System.out.println("-------");
		System.out.print("계좌번호: ");
		String ano = scanner.next();
		
		System.out.print("계좌주:");
		String owner = scanner.next();
		
		System.out.print("초기입금액: ");
		int balance = scanner.nextInt();
		
		Account newAccount = new Account(ano,owner,balance);
		
		for(int i=0; i<accountArray.length;i++) {
			if(accountArray[i]==null) {
				accountArray[i]=newAccount;
				System.out.println("계좌 생성되었습니다.");
				break;
			}
		}
		
	}
	
	
	//계좌목록
	private static void accountList() {
		System.out.println("계좌 목록");
		System.out.println("-----------");
		
		for(int i=0; i<accountArray.length;i++) {
			if(accountArray[i] != null) {
				System.out.print(accountArray[i].getAno());
				System.out.print("    ");
				System.out.print(accountArray[i].getOwner());
				System.out.print("    ");
				System.out.println(accountArray[i].getBalance());
			}
		}
		
	}
	
	
	//예금
	private static void desposit() {
		System.out.println("예금");
		System.out.println("---------");
		
		System.out.println("계좌번호: ");
		String ano = scanner.next();
		
		System.out.println("예금액: ");
		int money = scanner.nextInt();
		
		Account account = findAccount(ano);
		//예외처리
		if(account == null) {
			System.err.println("계좌가 없습니다.");
			return;
		}
		account.setBalance(account.getBalance() + money);
		
	
		System.out.println("예금이 성공되었습니다.");
	}
	
	
	//출금
	private static void withdraw() {
		System.out.println("출금");
		System.out.println("----------");
		
		System.out.println("계좌번호: ");
		String ano = scanner.next();
		
		System.out.println("출금액");
		int money = scanner.nextInt();
		
		Account account = findAccount(ano);
		if(account == null) {
			System.out.println("계좌가 없습니다.");
			return;
		}
		if(account.getBalance()-money<0) {
			System.out.println("출금이 불가합니다.잔액을 확인해주세요.");
			return;
		}
		account.setBalance(account.getBalance()-money);
		
	}
	
	//Account 배열에서 ano와 동일한 Account 객체 찾기
	private static Account findAccount(String ano) {
		Account account = null;
		for(int i=0; i<accountArray.length;i++) {
			if(accountArray[i] != null) {
				String dbAno = accountArray[i].getAno();
				if(dbAno.equals(ano)) {
					account = accountArray[i];
					break;
				}
			}
		}
		return account;
		
	}

}
